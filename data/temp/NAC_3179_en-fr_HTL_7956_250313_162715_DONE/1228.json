{
    "source": "en_US",
    "target": "fr_FR",
    "text": "JavaScript is often rated as the most popular programming language for the development of both client-side and server-side applications. Because of its popularity, JavaScript has become a frequent target for attackers, who exploit vulnerabilities in the source code to take control over the application. To address these JavaScript security issues, such vulnerabilities must be identified first. Existing studies in vulnerable code detection in JavaScript mostly consider package-level vulnerability tracking and measurements. However, such package-level analysis is largely imprecise as real-world services that include a vulnerable package may not use the vulnerable functions in the package. Moreover, even the inclusion of a vulnerable function may not lead to a security problem, if the function cannot be triggered with exploitable inputs. In this thesis, we develop a vulnerability detection framework that uses vulnerable pattern recognition and textual similarity methods to detect vulnerable functions in real-world JavaScript projects, combined with a static multi-file taint analysis mechanism to further assess the impact of the vulnerabilities on the whole project (i.e., whether the vulnerability can be exploited in a given project). We compose a comprehensive dataset of 1,360 verified vulnerable JavaScript functions using the Snyk vulnerability database and the VulnCode-DB project. From this ground-truth dataset, we build our vulnerable patterns for two common vulnerability types: prototype pollution and Regular Expression Denial of Service (ReDoS). With our framework, we analyze 9,205,654 functions (from 3,000 NPM packages, 1892 websites and 557 Chrome Web extensions), and detect 117,601 prototype pollution and 7,333 ReDoS vulnerabilities. By further processing all 5,839 findings from NPM packages with our taint analyzer, we verify the exploitability of 290 zero-day cases across 134 NPM packages. In addition, we conduct an in-depth contextual analysis of the findings in 17 popular/critical projects and study the practical security exposure of 20 functions. With our semi-automated vulnerability reporting functionality, we disclose all verified findings to project owners. We also obtained four CVEs for our findings, two of them rated as 9.8/10 (critical) severity, one as 9.1/10 (critical), and one as 7.5/10 (high) severity; several other CVE requests are still in the process now. As evident from the results, our approach can shift JavaScript vulnerability detection from the coarse package/library level to the function level, and thus improve the accuracy of detection and aid timely patching",
    "trans": "JavaScript est souvent considéré comme le langage de programmation le plus populaire pour le développement d'applications côté client et côté serveur. En raison de sa popularité, JavaScript est devenu une cible fréquente pour les attaquants, qui exploitent les vulnérabilités du code source pour prendre le contrôle de l'application. Pour résoudre ces problèmes de sécurité JavaScript, ces vulnérabilités doivent d'abord être identifiées. Les études existantes sur la détection de code vulnérable en JavaScript considèrent principalement le suivi et les mesures des vulnérabilités au niveau des paquets. Cependant, une telle analyse au niveau des paquets est largement imprécise, car les services du monde réel qui incluent un paquet vulnérable peuvent ne pas utiliser les fonctions vulnérables du paquet. De plus, même l'inclusion d'une fonction vulnérable peut ne pas entraîner de problème de sécurité, si la fonction ne peut pas être déclenchée avec des entrées exploitables.Dans cette thèse, nous développons un cadre de détection de vulnérabilités qui utilise la reconnaissance de modèles vulnérables et des méthodes de similarité textuelle pour détecter les fonctions vulnérables dans les projets JavaScript du monde réel, combiné à un mécanisme d'analyse de propagation de données statique multi-fichiers pour évaluer davantage l'impact des vulnérabilités sur l'ensemble du projet (c'est-à-dire, si la vulnérabilité peut être exploitée dans un projet donné). Nous constituons un ensemble de données complet de 1 360 fonctions JavaScript vulnérables vérifiées à l'aide de la base de données de vulnérabilités Snyk et du projet VulnCode-DB. À partir de cet ensemble de données de référence, nous construisons nos modèles vulnérables pour deux types de vulnérabilités courants : la pollution de prototype et le déni de service par expressions régulières (ReDoS). Avec notre cadre, nous analysons 9 205 654 fonctions (provenant de 3 000 paquets NPM, 1 892 sites Web et 557 extensions Web Chrome) et détectons 117 601 vulnérabilités de pollution de prototype et 7 333 vulnérabilités ReDoS. En traitant davantage les 5 839 résultats des paquets NPM avec notre analyseur de propagation de données, nous vérifions l'exploitabilité de 290 cas de zéro-day dans 134 paquets NPM. De plus, nous effectuons une analyse contextuelle approfondie des résultats dans 17 projets populaires/critiques et étudions l'exposition pratique à la sécurité de 20 fonctions. Grâce à notre fonctionnalité de rapport de vulnérabilités semi-automatisée, nous divulguons tous les résultats vérifiés aux propriétaires de projet. Nous avons également obtenu quatre CVE pour nos résultats, dont deux classés comme gravité 9,8/10 (critique), un comme 9,1/10 (critique) et un comme 7,5/10 (élevé) ; plusieurs autres demandes de CVE sont actuellement en cours de traitement. Comme le montrent les résultats, notre approche peut faire passer la détection de vulnérabilités JavaScript du niveau grossier des paquets/bibliothèques au niveau des fonctions, et ainsi améliorer la précision de la détection et faciliter l'application de correctifs en temps opportun."
}