{
    "source": "en_US",
    "target": "fr_FR",
    "text": "In programming languages, primitive data types are the basic, built-in types with fixed definitions, like numbers or characters. They are immutable in functionality; for instance, how addition works on numbers can’t be redefined. While these types vary slightly across languages, they often include types like bytes or references.\nBeyond primitives, languages also use composite data types, which combine primitives to form more complex structures. Like a sandcastle built from sand, sticks, and water, these structures are composed of multiple primitive types. Examples include enumerations (enums), which represent a list of values that can be counted or accessed individually, often built from character or string primitives. Composite types allow more flexible data representation while relying on foundational primitive types.",
    "trans": "Dans les langages de programmation, les types de données primitifs sont les types de base, intégrés, avec des définitions fixes, comme les nombres ou les caractères. Ils sont immuables dans leur fonctionnalité ; par exemple, la manière dont l'addition fonctionne sur les nombres ne peut pas être redéfinie. Bien que ces types varient légèrement d'un langage à l'autre, ils incluent souvent des types comme les octets ou les références.\nAu-delà des types primitifs, les langages utilisent également des types de données composites, qui combinent des primitifs pour former des structures plus complexes. Comme un château de sable construit à partir de sable, de bâtons et d'eau, ces structures sont composées de plusieurs types primitifs. Des exemples incluent les énumérations (enums), qui représentent une liste de valeurs pouvant être comptées ou accédées individuellement, souvent construites à partir de types primitifs comme les caractères ou les chaînes de caractères. Les types composites permettent une représentation des données plus flexible tout en s'appuyant sur les types primitifs fondamentaux."
}