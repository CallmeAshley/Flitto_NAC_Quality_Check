{
    "source": "en_US",
    "target": "fr_FR",
    "text": "Dart is an object-oriented programming (OOP) language, and like other OOP languages, it supports the fundamental principles of OOP: encapsulation, inheritance, polymorphism, and abstraction. Here’s a breakdown of each concept along with examples:\n1. Encapsulation\nEncapsulation is the concept of bundling data (fields) and methods (functions) that operate on the data within a single unit, usually a class. It also involves restricting direct access to some of the object’s components, which can be done using access modifiers (public, private, etc.).\nIn Dart, instance variables are by default public, but you can make them private by prefixing the variable name with an underscore _.\nExample:",
    "trans": "Dart est un langage de programmation orienté objet (POO) et, comme d'autres langages POO, il prend en charge les principes fondamentaux de la POO : encapsulation, héritage, polymorphisme et abstraction. Voici une explication de chaque concept, accompagnée d'exemples :\n1. Encapsulation\nL'encapsulation est le concept qui consiste à regrouper des données (champs) et des méthodes (fonctions) qui opèrent sur ces données au sein d'une seule unité, généralement une classe. Elle implique également de restreindre l'accès direct à certains composants de l'objet, ce qui peut être réalisé à l'aide de modificateurs d'accès (public, privé, etc.).\nEn Dart, les variables d'instance sont publiques par défaut, mais vous pouvez les rendre privées en préfixant le nom de la variable par un tiret bas _.\nExemple :"
}