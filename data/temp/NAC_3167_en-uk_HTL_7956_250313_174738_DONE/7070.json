{
    "source": "en_US",
    "target": "uk_UA",
    "text": "Dart is an object-oriented programming (OOP) language, and like other OOP languages, it supports the fundamental principles of OOP: encapsulation, inheritance, polymorphism, and abstraction. Here’s a breakdown of each concept along with examples:\n1. Encapsulation\nEncapsulation is the concept of bundling data (fields) and methods (functions) that operate on the data within a single unit, usually a class. It also involves restricting direct access to some of the object’s components, which can be done using access modifiers (public, private, etc.).\nIn Dart, instance variables are by default public, but you can make them private by prefixing the variable name with an underscore _.\nExample:",
    "trans": "Dart є мовою об'єктно-орієнтованого програмування (ООП), і, як і інші мови ООП, вона підтримує фундаментальні принципи ООП: інкапсуляцію, спадкоємність, поліморфізм та абстракцію. Ось розбір кожної концепції разом із прикладами:\n1. Інкапсуляція\nІнкапсуляція є концепцією об'єднання даних (полів) і методів (функцій), які працюють із цими даними, в межах однієї одиниці, зазвичай класу. Вона також включає в себе обмеження прямого доступу до деяких компонентів об'єкта, що можна зробити за допомогою модифікаторів доступу (публічний, приватний тощо).\nУ Dart змінні екземпляра за замовчуванням є публічними, але у вас є можливість зробити їх приватними, додавши до імені змінної символ підкреслення _.\nПриклад:"
}