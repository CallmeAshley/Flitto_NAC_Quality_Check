{
    "source": "en_US",
    "target": "uk_UA",
    "text": "In programming languages, primitive data types are the basic, built-in types with fixed definitions, like numbers or characters. They are immutable in functionality; for instance, how addition works on numbers can’t be redefined. While these types vary slightly across languages, they often include types like bytes or references.\nBeyond primitives, languages also use composite data types, which combine primitives to form more complex structures. Like a sandcastle built from sand, sticks, and water, these structures are composed of multiple primitive types. Examples include enumerations (enums), which represent a list of values that can be counted or accessed individually, often built from character or string primitives. Composite types allow more flexible data representation while relying on foundational primitive types.",
    "trans": "У мовах програмування примітивні типи даних є базовими, вбудованими типами з фіксованими визначеннями, такими як числа або символи. Вони є незмінними за функціональністю; наприклад, спосіб виконання додавання над числами не може бути переозначений. Хоча ці типи трохи відрізняються в різних мовах, вони часто включають такі типи, як байти або посилання.\nОкрім примітивів, мови також використовують складні типи даних, які поєднують примітиви для формування більш складних структур. Як піщаний замок, побудований з піску, паличок і води, ці структури складаються з кількох примітивних типів. Прикладами є перерахування (enums), які представляють список значень, які можна рахувати або отримувати окремо, часто побудовані з примітивів символів або рядків. Складні типи дозволяють більш гнучке представлення даних, спираючись на основні примітивні типи."
}