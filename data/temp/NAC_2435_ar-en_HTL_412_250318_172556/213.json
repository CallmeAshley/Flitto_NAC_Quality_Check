{
    "source": "ar_AE",
    "target": "en_US",
    "text": "(a) Explain the lifecycle of a thread in the SchedulerSimulation class from its creation to its termination. (0.5 mark)\nالحل:\nفي كود SchedulerSimulation، كل عملية يتم تمثيلها باستخدام كائن Process، الذي يتم تشغيله في خيط (Thread). دورة حياة الخيط تمر بالمراحل التالية:\n1. إنشاء الخيط:\n• يبدأ الخيط عندما يتم إنشاء كائن Thread باستخدام كائن Process. يتم إنشاء الخيط في الميثود addProcessToQueue باستخدام السطر:\nThread thread = new Thread(process);\n• يتم إضافة الخيط إلى قائمة العمليات الجاهزة (FIFO Queue).\n2. بدء الخيط:\n• يتم استدعاء الخيط بواسطة start() في الحلقة الرئيسية في SchedulerSimulation:\ncurrentThread.start();\n• هذا يؤدي إلى استدعاء ميثود run() في كائن Process.\n3. تنفيذ العملية:\n• يقوم الخيط بتنفيذ جزء من المهمة المخصصة له بناءً على الـ time quantum المحدد.\n• يتم تشغيل الخيط لفترة زمنية معينة (الـ time quantum أو الوقت المتبقي، أيهما أقل)، ثم يتم تعديل الوقت المتبقي للعملية:\nremainingTime -= runTime;\n4. التوقف أو إنهاء العملية:\n• إذا انتهى وقت تنفيذ الخيط ولم ينته من تنفيذ العملية، فإنه يتوقف عن التنفيذ ويعيد الخيط إلى قائمة الانتظار.\n• إذا انتهى من التنفيذ، يتم طباعة رسالة توضح أن العملية قد اكتملت:\nSystem.out.println(name + \" has finished execution.\") ;\n5. الانضمام (join):\n• بعد أن يتم استدعاء start(), يتم استخدام join() لجعل البرنامج الرئيسي ينتظر حتى ينتهي الخيط:",
    "trans": "(a) Explain the lifecycle of a thread in the SchedulerSimulation class from its creation to its termination. (0.5 mark)\nSolution:\nIn the SchedulerSimulation code, each process is represented using a Process object, which is executed in a thread. The thread lifecycle undergoes the following stages:\n1. Thread Creation:\n• The thread begins when a Thread object is created using a Process object. The thread is created in the addProcessToQueue method with the line:\nThread thread = new Thread(process);\n• The thread is added to the ready queue (FIFO Queue).\n2. Thread Start:\n• The thread is invoked using start() in the main loop in SchedulerSimulation:\ncurrentThread.start();\n• This triggers the run() method in the Process object.\n3. Process Execution:\n• The thread executes part of its assigned task based on the specified time quantum.\n• The thread runs for a specified time (either the time quantum or the remaining time, whichever is smaller), and the remaining process time is adjusted:\nremainingTime -= runTime;\n4. Process Pausing or Termination:\n• If the thread's execution time is up and the process is not finished, the thread pauses execution and is returned to the queue.\n• If the process completes execution, a message indicating completion is printed:\nSystem.out.println(name + \" has finished execution.\") ;\n5. Join:\n• After invoking start(), join() is used to make the main program wait until the thread finishes:"
}