{
    "source": "en_US",
    "target": "ko_KR",
    "text": "JavaScript is often rated as the most popular programming language for the development of both client-side and server-side applications. Because of its popularity, JavaScript has become a frequent target for attackers, who exploit vulnerabilities in the source code to take control over the application. To address these JavaScript security issues, such vulnerabilities must be identified first. Existing studies in vulnerable code detection in JavaScript mostly consider package-level vulnerability tracking and measurements. However, such package-level analysis is largely imprecise as real-world services that include a vulnerable package may not use the vulnerable functions in the package. Moreover, even the inclusion of a vulnerable function may not lead to a security problem, if the function cannot be triggered with exploitable inputs. In this thesis, we develop a vulnerability detection framework that uses vulnerable pattern recognition and textual similarity methods to detect vulnerable functions in real-world JavaScript projects, combined with a static multi-file taint analysis mechanism to further assess the impact of the vulnerabilities on the whole project (i.e., whether the vulnerability can be exploited in a given project). We compose a comprehensive dataset of 1,360 verified vulnerable JavaScript functions using the Snyk vulnerability database and the VulnCode-DB project. From this ground-truth dataset, we build our vulnerable patterns for two common vulnerability types: prototype pollution and Regular Expression Denial of Service (ReDoS). With our framework, we analyze 9,205,654 functions (from 3,000 NPM packages, 1892 websites and 557 Chrome Web extensions), and detect 117,601 prototype pollution and 7,333 ReDoS vulnerabilities. By further processing all 5,839 findings from NPM packages with our taint analyzer, we verify the exploitability of 290 zero-day cases across 134 NPM packages. In addition, we conduct an in-depth contextual analysis of the findings in 17 popular/critical projects and study the practical security exposure of 20 functions. With our semi-automated vulnerability reporting functionality, we disclose all verified findings to project owners. We also obtained four CVEs for our findings, two of them rated as 9.8/10 (critical) severity, one as 9.1/10 (critical), and one as 7.5/10 (high) severity; several other CVE requests are still in the process now. As evident from the results, our approach can shift JavaScript vulnerability detection from the coarse package/library level to the function level, and thus improve the accuracy of detection and aid timely patching",
    "trans": "JavaScript는 클라이언트 측 및 서버 측 애플리케이션 개발을 위한 가장 인기 있는 프로그래밍 언어로 자주 평가됩니다. 그 인기로 인해 JavaScript는 공격자들이 애플리케이션을 제어하기 위해 소스 코드의 취약점을 악용하는 주요 대상이 되었습니다. 이러한 JavaScript 보안 문제를 해결하기 위해서는 먼저 취약점을 식별해야 합니다. 기존의 JavaScript에서 취약한 코드 탐지 연구는 주로 패키지 수준의 취약성 추적 및 측정을 다루고 있습니다. 그러나 이러한 패키지 수준의 분석은 실제 서비스가 취약한 패키지를 포함하고 있더라도 해당 패키지의 취약한 기능을 사용하지 않을 수 있기 때문에 정확성이 떨어집니다. 또한 취약한 기능이 포함되었더라도 그 기능이 악용 가능한 입력으로 트리거되지 않는다면 보안 문제가 발생하지 않을 수 있습니다. 본 논문에서는 실제 JavaScript 프로젝트에서 취약한 기능을 탐지하기 위해 취약한 패턴 인식 및 텍스트 유사성 방법을 사용한 취약성 탐지 프레임워크를 개발하며, 프로젝트 전체에 미치는 취약점의 영향을 추가로 평가하기 위해 정적 다중 파일 오염 분석 메커니즘을 결합합니다 (즉, 취약점이 주어진 프로젝트에서 악용될 수 있는지 여부). 우리는 Snyk 취약점 데이터베이스와 VulnCode-DB 프로젝트를 사용하여 1,360개의 검증된 취약한 JavaScript 함수로 구성된 포괄적인 데이터셋을 작성합니다. 이 실제 데이터셋을 바탕으로 두 가지 일반적인 취약성 유형인 프로토타입 오염(prototype pollution)과 정규 표현식 서비스 거부(Regular Expression Denial of Service, ReDoS)에 대한 취약한 패턴을 구축합니다. 우리의 프레임워크를 사용하여 9,205,654개의 함수(3,000개의 NPM 패키지, 1,892개의 웹사이트, 557개의 Chrome 웹 확장 프로그램에서)를 분석하고 117,601개의 프로토타입 오염과 7,333개의 ReDoS 취약점을 탐지합니다. 이후 NPM 패키지에서 5,839개의 모든 결과를 오염 분석기를 통해 처리하여 134개의 NPM 패키지에서 290개의 제로데이 취약점의 악용 가능성을 검증합니다. 또한 17개의 인기/중요 프로젝트에서 결과에 대한 심층적인 맥락 분석을 수행하고 20개의 함수에 대한 실제 보안 노출을 연구합니다. 우리의 반자동 취약성 보고 기능을 통해 모든 검증된 결과를 프로젝트 소유자에게 공개했습니다. 우리는 또한 네 가지 CVE를 얻었으며, 그 중 두 개는 9.8/10(치명적) 등급, 하나는 9.1/10(치명적), 하나는 7.5/10(높음) 등급으로 평가되었습니다. 여러 다른 CVE 요청도 현재 처리 중입니다. 결과에서 알 수 있듯이, 우리의 접근 방식은 JavaScript 취약성 탐지를 패키지/라이브러리 수준에서 함수 수준으로 전환할 수 있으며, 이를 통해 탐지 정확도를 개선하고 시기적절한 패치 작업을 지원할 수 있습니다."
}